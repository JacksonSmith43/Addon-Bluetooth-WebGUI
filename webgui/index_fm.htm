<!DOCTYPE html>
<html lang="en">
<head>
    <title>FLipMouse Configuration</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="shortcut icon" href="favicon_fm.ico" type="image/x-icon">
    <link rel="icon" href="favicon_fm.ico" type="image/x-icon">

    <link rel="stylesheet" href="css/normal.css">
    <link rel="stylesheet" href="css/skeleton.css">
    <link rel="stylesheet" href="css/custom.css">
    <link rel="stylesheet" href="css/modal.css">
    <link rel="stylesheet" href="css/slider.css">
    <link rel="stylesheet" href="css/bootstrap-custom.css">
    <link rel="stylesheet" href="css/bootstrap-grid.css">
    <script src="lib/domi18n.js"></script>
    <script src="lib/loglevel.min.js"></script>

    <script src="js_fm/const.js"></script>
    <script src="js/lquery.js"></script>
    <script src="js/wsutil.js"></script>
    <script src="js/arecomm.js"></script>
    <script src="js_fm/communication/sercomm.js"></script>
    <script src="js/wscomm.js"></script>
    <script src="js_fm/communication/flipcomm.js"></script>
    <script src="js_fm/communication/mockcomm.js"></script>
    <script src="js_fm/shortcut.js"></script>
    <script src="js_fm/router.js"></script>
    <script type="module" src="js_fm/util/preactUtil.js"></script>
    <script type="module" src="js_fm/ui/components/PositionVisualization.js"></script>
    <script type="module" src="js_fm/ui/components/BtnSipPuffVisualization.js"></script>
    <script type="module" src="js_fm/ui/views/TabVisualization.js"></script>
    <script type="module" src="js_fm/ui/views/TabSlots.js"></script>
    <script type="module" src="js_fm/ui/views/TabActions.js"></script>
    <script type="module" src="js_fm/util/styleUtil.js"></script>
</head>
<body>
<div id="connectDiv">
    <div id="connectContent" style="display: none">
        <h1>FLipMouse Configuration</h1>
        <div class="row">
            <button class="twelve columns" data-i18n="" onclick="initFlip()">Connect to FLipMouse connected via USB // Verbinden zu FLipMouse (über USB angeschlossen)</button>
            <button class="twelve columns" data-i18n="" onclick="testMode()">Use Test mode without real FLipMouse // Test-Modus ohne echte FLipMouse verwenden</button>
        </div>
    </div>
</div>
<div id="content">
    <header class="container-fluid" role="banner">
        <div class="row">
            <div>
                <h1 id="mainHeading" tabindex="-1" class="nine columns" data-i18n>FLipMouse Configuration // FLipMouse Konfiguration</h1>
                <span aria-hidden="true" class="show-mobile headerConnectIndicator green connectedIndicator" style="display: none" title="connected">&#x2713;</span>
                <span aria-hidden="true" class="show-mobile headerConnectIndicator red disconnectedIndicator" title="not connected">&#x2717;</span>
            </div>
            <div class="three columns hide-mobile showscreenreader">
                <div class="row">
                    <label class="seven columns" for="selectSlots" data-i18n>Select Slot // Slot auswählen</label>
                    <div class="four columns text-right">
                        <span aria-hidden="true" style="display: none" class="connectedIndicator" title="connected">&#x2713;</span>
                        <span aria-hidden="true" class="disconnectedIndicator" title="not connected">&#x2717;</span>
                        <span id="connStateLabel" aria-hidden="false" class="hidden" data-i18n>connection status // Verbindungsstatus</span>
                        <span id="connStateText" aria-hidden="false" aria-describedby="connStateLabel" aria-live="assertive" role="status" class="show-desktop" accesskey="p" data-i18n>not connected // nicht verbunden</span>
                    </div>
                </div>
                <select aria-hidden="true" id="selectSlots" class="slot-select row u-full-width" onchange="flip.setSlot(this.value)">
                </select>
            </div>
        </div>
        <div class="row mb-5" id="tabMenu" role="menubar" tabindex="-1" accesskey="0">
            <button id="toNavLink" onclick="L.toggleClass('.menubutton', 'd-none')" class="col d-md-none button button-primary" data-tab data-i18n>&#x2630; Menu // &#x2630; Menü</button>
            <button role="menuitem" onclick="router.toView('#tabStick')" class="col-md m-1 d-none d-md-block menubutton button-primary" accesskey="1" data-tab id="tabStickBtn">Stick-Config</button>
            <button role="menuitem" onclick="router.toView('#tabPuff')" class="col-md m-1 d-none d-md-block menubutton button-primary" accesskey="2" data-tab id="tabPuffBtn" data-i18n>Sip and Puff // Saug-Puste-Steuerung</button>
            <button role="menuitem" onclick="router.toView('#tabSlots')" class="col-md m-1 d-none d-md-block menubutton button-primary" accesskey="3" data-tab id="tabSlotsBtn" data-i18n>Slots // Slots</button>
            <button role="menuitem" onclick="router.toView('#tabActions')" class="col-md m-1 d-none d-md-block menubutton button-primary" accesskey="4" data-tab id="tabActionsBtn" data-i18n>Actions // Aktionen</button>
            <button role="menuitem" onclick="router.toView('#tabGeneral')" class="col-md m-1 d-none d-md-block menubutton button-primary" accesskey="5" data-tab id="tabGeneralBtn" data-i18n>General // Allgemein</button>
            <button role="menuitem" onclick="router.toView('#tabVis')" class="col-md m-1 d-none d-md-block menubutton button-primary" accesskey="6" data-tab id="tabVisBtn" data-i18n>Visualization // Visualisierung</button>
        </div>
    </header>
    <main role="main">
        <div id="viewContainer">

        </div>
    </main>
</div>

<script type="module">
    import {TabVisualization} from "./js_fm/ui/views/TabVisualization.js";
    import {TabStick} from "./js_fm/ui/views/TabStick.js";
    import {TabSipPuff} from "./js_fm/ui/views/TabSipPuff.js";
    import {TabSlots} from "./js_fm/ui/views/TabSlots.js";
    import {TabActions} from "./js_fm/ui/views/TabActions.js";
    import {TabGeneral} from "./js_fm/ui/views/TabGeneral.js";

    router.addView('#tabStick', TabStick);
    router.addView('#tabPuff', TabSipPuff);
    router.addView('#tabSlots', TabSlots);
    router.addView('#tabActions', TabActions);
    router.addView('#tabGeneral', TabGeneral);
    router.addView('#tabVis', TabVisualization);
</script>

<script>
    window.onload = function () {
        window.domI18nInstance = domI18n({
            selector: '[data-i18n]',
            separator: ' // ',
            languages: ['en', 'de'],
            enableLog: false
        });
        L.loadScript('js_fm/i18n/i18n_' + L.getLang() + '.js', 'js_fm/i18n/i18n_en.js').then(function () {
            L('html')[0].lang = window.lang;
            if (C.GUI_IS_MOCKED_VERSION || C.GUI_IS_ON_DEVICE) {
                initFlip();
            } else {
                L.setVisible('#connectContent');
            }
        });
    };

    function testMode() {
        C.GUI_IS_MOCKED_VERSION = true;
        initFlip();
    }

    function initFlip() {
        window.flip = new FlipMouse();
        flip.init().then(function (config) {
            L.setVisible('#connectDiv', false);
            flip.setSlotChangeHandler((slot, newconfig) => {
                L('#selectSlots').value = slot;
                //TODO
            });
            router.toView();
            flip.addConnectionTestCallback((isConnected) => {
                L.setVisible('.connectedIndicator', isConnected, 'inline');
                L.setVisible('.disconnectedIndicator', !isConnected, 'inline');
                L('#connStateText').innerHTML = isConnected ? L.translate('CONNECTED') : L.translate('NOT_CONNECTED');
            });
        });
    }

    function actionAndToggle(actionFunction, argList, toggleElementList, progressBarId) {
        return new Promise(function (resolve) {
            var maxProgress = 0;
            var stopProgressBar = false;
            argList = argList || [];
            L.toggle.apply(null, toggleElementList);
            var promise = actionFunction.apply(null, argList.concat(progressHandler));
            if (promise && promise.then) {
                promise.then(function () {
                    if (progressBarId) {
                        progressHandler(100, 100);
                        setTimeout(function () {
                            stopProgressBar = true;
                            L(progressBarId).style = 'width: 0%;';
                        }, 500);
                    }
                    L.toggle.apply(null, toggleElementList);
                    resolve();
                }, function () {
                    stopProgressBar = true;
                });
            }

            function progressHandler(progress, timeConstant) {
                var startTime = L.getMs();
                timeConstant = timeConstant || 1000;
                if (progressBarId) {
                    updateProgressBar(maxProgress);
                }

                function updateProgressBar(oldPrg) {
                    setTimeout(function () {
                        var t = L.getMs() - startTime;
                        var p = (progress - oldPrg) * (1 - Math.exp(-t / timeConstant)) + oldPrg;
                        if (p > maxProgress && !stopProgressBar) {
                            maxProgress = p;
                            L(progressBarId).style = 'width: ' + p + '%;';
                            updateProgressBar(oldPrg);
                        }
                    }, 50);
                }
            }
        });
    }
</script>
</body>
</html>
