<!DOCTYPE html>
<html lang="en">
<head>
    <title>FLipMouse Test</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="shortcut icon" href="favicon_fm.ico" type="image/x-icon">
    <link rel="icon" href="favicon_fm.ico" type="image/x-icon">

    <link rel="stylesheet" href="css/bootstrap-custom.css">
    <link rel="stylesheet" href="css/bootstrap-grid.css">
    <script src="lib/domi18n.js"></script>
    <script src="lib/loglevel.min.js"></script>

    <script src="js_fm/const.js"></script>
    <script src="js/lquery.js"></script>
    <script src="js_fm/sercomm.js"></script>
    <script src="js_fm/flipcomm.js"></script>
</head>
<body>
<div id="connectDiv">
    <div id="connectContent">
        <h1>FLipMouse Test</h1>
        <button onclick="start()">Start Test</button>
    </div>
    <h2>Log</h2>
    <button onclick="document.getElementById('log').innerHTML = ''">Clear Log</button>
    <div id="log" class="mt-4">

    </div>
</div>

<script>
    let PRINT_DEBUG = true;
    let DEFAULT_CONFIG = "{\"mouse\":{\"SLOT_ID\":0,\"SENSITIVITY_X\":38,\"SENSITIVITY_Y\":38,\"DEADZONE_X\":22,\"DEADZONE_Y\":22,\"MAX_SPEED\":50,\"ACCELERATION\":20,\"SIP_THRESHOLD\":444,\"PUFF_THRESHOLD\":596,\"PUFF_STRONG_THRESHOLD\":611,\"SIP_STRONG_THRESHOLD\":399,\"FLIPMOUSE_MODE\":\"MODE_MOUSE\",\"ORIENTATION_ANGLE\":270,\"BTN_MODE_BUTTON_1\":\"AT NE\",\"BTN_MODE_BUTTON_2\":\"AT KW asdf\",\"BTN_MODE_BUTTON_3\":\"AT NC\",\"BTN_MODE_STICK_UP\":\"AT KP KEY_UP\",\"BTN_MODE_STICK_DOWN\":\"AT KP KEY_DOWN\",\"BTN_MODE_STICK_LEFT\":\"AT KP KEY_LEFT\",\"BTN_MODE_STICK_RIGHT\":\"AT KP KEY_RIGHT\",\"BTN_MODE_SIP\":\"AT HL\",\"BTN_MODE_STRONG_SIP\":\"AT NC\",\"BTN_MODE_PUFF\":\"AT CR\",\"BTN_MODE_STRONG_PUFF\":\"AT CA\"}}";
    let DEFAULT_SLOTNAME = "mouse";
    let DEFAULT_SLOT = JSON.parse(DEFAULT_CONFIG)[DEFAULT_SLOTNAME];
    let assertFails = 0;
    let assertSuccess = 0;

    async function doAllTests() {
        //await doTest(testDefaultConfig, 'testDefaultConfig');
        //await doTest(testChangeValueDeadzone, 'testChangeValueDeadzone');
        //await doTest(testSecondSlot, 'testSecondSlot');
        await doTest(testChangeSlotLength, 'testChangeSlotLength');
    }

    async function testDefaultConfig() {
        let config = flip.getAllSlotConfigs();
        assertEqual(config, DEFAULT_CONFIG);
    }

    async function testChangeValueDeadzone() {
        await flip.sendATCmd('AT DX', 123);
        await flip.sendATCmd('AT SA mouse');
        await flip.refreshConfig();
        assertEqual(flip.getConfig(flip.DEADZONE_X), 123);
    }

    async function testSecondSlot() {
        await flip.sendATCmd('AT SA slot2');
        await flip.refreshConfig();
        let allSlots = flip.getAllSlotConfigs();
        assertEqual(allSlots[DEFAULT_SLOTNAME], DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(allSlots['slot2'], DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
    }

    async function testChangeSlotLength() {
        await flip.sendATCmd('AT SA slot2');
        await flip.sendATCmd('AT LO', DEFAULT_SLOTNAME);
        await flip.setButtonAction(C.BTN_MODE_BUTTON_1, 'AT KW 123'); // button mode for Slot mouse
        await flip.sendATCmd('AT SA', DEFAULT_SLOTNAME);
        await flip.refreshConfig();
        let slot2 = flip.getAllSlotConfigs()['slot2'];
        let slotMouse = flip.getAllSlotConfigs()[DEFAULT_SLOTNAME];
        assertEqual(slotMouse, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID, C.BTN_MODE_BUTTON_1]});
        assertEqual(slot2, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(flip.getConfig(C.BTN_MODE_BUTTON_1), 'AT KW 123');
        await flip.setButtonAction(C.BTN_MODE_BUTTON_1, 'AT KW 12345'); // button mode for Slot mouse
        await flip.sendATCmd('AT SA', DEFAULT_SLOTNAME);
        await flip.refreshConfig();
        assertEqual(slotMouse, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID, C.BTN_MODE_BUTTON_1]});
        assertEqual(slot2, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(flip.getConfig(C.BTN_MODE_BUTTON_1), 'AT KW 12345');
    }

    function start() {
        if (window.flip) {
            return doAllTests();
        }
        window.flip = new FlipMouse();
        flip.init().then(function () {
            doAllTests();
        });
    }

    /////////////////////////
    // util functions
    /////////////////////////
    async function doTest(testFn, testName) {
        assertFails = 0;
        assertSuccess = 0;
        print(`Testing "${testName}"...`)
        await flip.restoreDefaultConfiguration();
        await sleep(3000); // Pausiert die Funktion für 3 Sekunden
        await testFn();
        if (assertFails > 0) {
            printWarn(`Test "${testName}" failed with ${assertFails} assertion violations and ${assertSuccess} successful assertions!`)
        } else {
            printSuccess(`Test "${testName}" was successful (${assertSuccess} successful assertions)!`)
        }
    }

    function assertEqual(val1, val2, options) {
        options = options || {};
        if (options.ignoreProperties) {
            options.ignoreProperties.forEach(ignore => {
                if(!isString(val1)) delete val1[ignore];
                if(!isString(val2)) delete val2[ignore];
            });
        }
        val1 = isString(val1) ? val1 : JSON.stringify(val1);
        val2 = isString(val2) ? val2 : JSON.stringify(val2);
        if (val1 !== val2) {
            assertFails++;
            log.warn('assert failed!');
            log.warn(val1);
            log.warn(val2);
            printWarn('assertion failed:');
            printWarn('value1: ' + val1);
            printWarn('value2: ' + val2);
        } else {
            assertSuccess++;
            log.info('assert success');
            printDebug('assertion success:');
            printDebug('value1: ' + val1);
            printDebug('value2: ' + val2);
        }
    }

    function isString(str) {
        return typeof str === 'string' || str instanceof String;
    }

    function print(text, color) {
        color = color || 'black';
        let html = `<div style="color: ${color}">${text}</div>`;
        document.getElementById('log').innerHTML += html;
    }

    function printWarn(text) {
        print(text, 'darkred');
    }

    function printSuccess(text) {
        print(text, 'green');
    }

    function printDebug(text) {
        if (PRINT_DEBUG) print(text, 'gray');
    }

    function sleep(milliseconds) {
        return new Promise(resolve => setTimeout(resolve, milliseconds));
    }
</script>
</body>
</html>
