<!DOCTYPE html>
<html lang="en">
<head>
    <title>FLipMouse Test</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="shortcut icon" href="favicon_fm.ico" type="image/x-icon">
    <link rel="icon" href="favicon_fm.ico" type="image/x-icon">

    <script src="lib/domi18n.js"></script>
    <script src="lib/loglevel.min.js"></script>

    <script src="js_fm/const.js"></script>
    <script src="js/lquery.js"></script>
    <script src="js_fm/communication/sercomm.js"></script>
    <script src="js_fm/communication/flipcomm.js"></script>
</head>
<body>
<div id="connectDiv">
    <div id="connectContent">
        <h1>FLipMouse Test</h1>
        <button onclick="initAndStart(doAllTests)">Start All Tests</button>
        <br/>
        <br/>
        <div>Start single test:</div>
        <div id="singleTests"></div>
    </div>
    <h2>Log</h2>
    <button onclick="document.getElementById('log').innerHTML = ''">Clear Log</button>
    <div id="log" class="mt-4">

    </div>
</div>

<script>
    let PRINT_DEBUG = false;
    let DEFAULT_CONFIG = "{\"mouse\":{\"SLOT_ID\":0,\"SENSITIVITY_X\":40,\"SENSITIVITY_Y\":40,\"DEADZONE_X\":20,\"DEADZONE_Y\":20,\"MAX_SPEED\":50,\"ACCELERATION\":20,\"SIP_THRESHOLD\":400,\"PUFF_THRESHOLD\":600,\"PUFF_STRONG_THRESHOLD\":800,\"SIP_STRONG_THRESHOLD\":10,\"FLIPMOUSE_MODE\":1,\"ORIENTATION_ANGLE\":0,\"BTN_MODE_BUTTON_1\":\"AT NE\",\"BTN_MODE_BUTTON_2\":\"AT NC\",\"BTN_MODE_BUTTON_3\":\"AT NC\",\"BTN_MODE_STICK_UP\":\"AT KP KEY_UP\",\"BTN_MODE_STICK_DOWN\":\"AT KP KEY_DOWN\",\"BTN_MODE_STICK_LEFT\":\"AT KP KEY_LEFT\",\"BTN_MODE_STICK_RIGHT\":\"AT KP KEY_RIGHT\",\"BTN_MODE_SIP\":\"AT HL\",\"BTN_MODE_STRONG_SIP\":\"AT NC\",\"BTN_MODE_PUFF\":\"AT CR\",\"BTN_MODE_STRONG_PUFF\":\"AT CA\"}}";
    let DEFAULT_SLOTNAME = "mouse";
    let DEFAULT_SLOT = JSON.parse(DEFAULT_CONFIG)[DEFAULT_SLOTNAME];
    let assertFails = 0;
    let assertSuccess = 0;
    let isTesting = false;

    /////////////////////////
    // test cases
    /////////////////////////
    let tests = [{
        fn: testDefaultConfig,
        name: 'testDefaultConfig'
    }, {
        fn: testChangeValueDeadzone,
        name: 'testChangeValueDeadzone'
    }, {
        fn: testSecondSlot,
        name: 'testSecondSlot'
    }, {
        fn: testIncreaseSlotLength,
        name: 'testIncreaseSlotLength'
    }, {
        fn: testDecreaseSlotLength,
        name: 'testDecreaseSlotLength'
    }, {
        fn: testDeleteSlot,
        name: 'testDeleteSlot'
    }, {
        fn: addDelete5Slots,
        name: 'addDelete5Slots'
    }, {
        fn: deleteMiddleSlot,
        name: 'deleteMiddleSlot'
    }, {
        fn: differentValuesInSlots,
        name: 'differentValuesInSlots'
    }];

    async function testDefaultConfig() {
        let config = flip.getAllSlotConfigs();
        log.info(JSON.stringify(config));
        assertEqual(config, DEFAULT_CONFIG);
    }

    async function testChangeValueDeadzone() {
        await flip.sendATCmd('AT DX', 123);
        await flip.sendATCmd('AT SA mouse');
        await flip.refreshConfig();
        assertEqual(flip.getConfig(flip.DEADZONE_X), 123);
    }

    async function testSecondSlot() {
        await flip.sendAtCmdWithResult('AT SA slot2');
        await flip.refreshConfig();
        let allSlots = flip.getAllSlotConfigs();
        assertEqual(allSlots[DEFAULT_SLOTNAME], DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(allSlots['slot2'], DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
    }

    async function testIncreaseSlotLength() {
        await flip.sendAtCmdWithResult('AT SA slot2');
        await flip.sendATCmd('AT LO', DEFAULT_SLOTNAME);
        await flip.setButtonAction(C.BTN_MODE_BUTTON_1, 'AT KW 123'); // button mode for Slot mouse
        await flip.sendATCmd('AT SA', DEFAULT_SLOTNAME);
        await flip.refreshConfig();
        let slot2 = flip.getAllSlotConfigs()['slot2'];
        let slotMouse = flip.getAllSlotConfigs()[DEFAULT_SLOTNAME];
        assertEqual(slotMouse, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID, C.BTN_MODE_BUTTON_1]});
        assertEqual(slot2, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(flip.getConfig(C.BTN_MODE_BUTTON_1), 'AT KW 123');
        await flip.setButtonAction(C.BTN_MODE_BUTTON_1, 'AT KW 12345'); // button mode for Slot mouse
        await flip.sendAtCmdWithResult('AT SA', DEFAULT_SLOTNAME);
        await flip.refreshConfig();
        assertEqual(slotMouse, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID, C.BTN_MODE_BUTTON_1]});
        assertEqual(slot2, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(flip.getConfig(C.BTN_MODE_BUTTON_1), 'AT KW 12345');
    }

    async function testDecreaseSlotLength() {
        await flip.sendAtCmdWithResult('AT SA slot2');
        await flip.sendATCmd('AT LO', DEFAULT_SLOTNAME);
        await flip.setButtonAction(C.BTN_MODE_BUTTON_1, 'AT KW 1234567890'); // button mode for Slot mouse
        await flip.sendATCmd('AT SA', DEFAULT_SLOTNAME);
        await flip.refreshConfig();
        let slot2 = flip.getAllSlotConfigs()['slot2'];
        let slotMouse = flip.getAllSlotConfigs()[DEFAULT_SLOTNAME];
        assertEqual(slotMouse, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID, C.BTN_MODE_BUTTON_1]});
        assertEqual(slot2, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(flip.getConfig(C.BTN_MODE_BUTTON_1), 'AT KW 1234567890');
        await flip.setButtonAction(C.BTN_MODE_BUTTON_1, 'AT KW 123'); // button mode for Slot mouse
        await flip.sendAtCmdWithResult('AT SA', DEFAULT_SLOTNAME);
        await flip.refreshConfig();
        assertEqual(slotMouse, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID, C.BTN_MODE_BUTTON_1]});
        assertEqual(slot2, DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(flip.getConfig(C.BTN_MODE_BUTTON_1), 'AT KW 123');
    }

    async function testDeleteSlot() {
        await flip.sendAtCmdWithResult('AT SA newSlot');
        await flip.refreshConfig();
        assertTrue(flip.getSlots().includes(DEFAULT_SLOTNAME));
        assertTrue(flip.getSlots().includes('newSlot'));
        await flip.sendAtCmdWithResult('AT DE newSlot');
        await flip.refreshConfig();
        assertTrue(flip.getSlots().includes(DEFAULT_SLOTNAME));
        assertFalse(flip.getSlots().includes('newSlot'));
    }

    async function addDelete5Slots() {
        await flip.sendAtCmdWithResult('AT SA slot1');
        await flip.sendAtCmdWithResult('AT SA slot2');
        await flip.sendAtCmdWithResult('AT SA slot3');
        await flip.sendAtCmdWithResult('AT SA slot4');
        await flip.sendAtCmdWithResult('AT SA slot5');
        await flip.refreshConfig();
        assertTrue(flip.getSlots().includes(DEFAULT_SLOTNAME));
        assertTrue(flip.getSlots().includes('slot1'));
        assertTrue(flip.getSlots().includes('slot2'));
        assertTrue(flip.getSlots().includes('slot3'));
        assertTrue(flip.getSlots().includes('slot4'));
        assertTrue(flip.getSlots().includes('slot5'));
        await flip.sendAtCmdWithResult('AT DE slot1');
        await flip.sendAtCmdWithResult('AT DE slot2');
        await flip.sendAtCmdWithResult('AT DE slot3');
        await flip.sendAtCmdWithResult('AT DE slot4');
        await flip.sendAtCmdWithResult('AT DE slot5');
        await flip.refreshConfig();
        assertTrue(flip.getSlots().includes(DEFAULT_SLOTNAME));
        assertEqual(flip.getSlots().length, 1);
    }

    async function deleteMiddleSlot() {
        await flip.sendAtCmdWithResult('AT SA slot1');
        await flip.sendAtCmdWithResult('AT SA slot2');
        await flip.sendAtCmdWithResult('AT SA slot3');
        await flip.refreshConfig();
        assertTrue(flip.getSlots().includes(DEFAULT_SLOTNAME));
        assertTrue(flip.getSlots().includes('slot1'));
        assertTrue(flip.getSlots().includes('slot2'));
        assertTrue(flip.getSlots().includes('slot3'));
        await flip.sendAtCmdWithResult('AT DE slot2');
        await flip.refreshConfig();
        assertTrue(flip.getSlots().includes(DEFAULT_SLOTNAME));
        assertEqual(flip.getSlots().length, 3);
        assertEqual(flip.getAllSlotConfigs()['mouse'], DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(flip.getAllSlotConfigs()['slot1'], DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
        assertEqual(flip.getAllSlotConfigs()['slot3'], DEFAULT_SLOT, {ignoreProperties: [flip.SLOT_ID]});
    }

    async function differentValuesInSlots() {
        await flip.sendATCmd('AT DX', 123);
        await flip.sendAtCmdWithResult('AT SA slot2');
        await flip.sendATCmd('AT LO', DEFAULT_SLOTNAME);
        await flip.sendATCmd('AT DX', 12);
        await flip.sendAtCmdWithResult('AT SA', DEFAULT_SLOTNAME);
        await flip.refreshConfig();
        assertEqual(flip.getConfig(flip.DEADZONE_X, 'slot2'), 123);
        assertEqual(flip.getConfig(flip.DEADZONE_X, DEFAULT_SLOTNAME), 12);
    }


    /////////////////////////
    // util functions
    /////////////////////////
    async function doAllTests() {
        if (isTesting) {
            return;
        }
        isTesting = true;
        for (let i = 0; i < tests.length; i++) {
            await doTest(tests[i].fn, tests[i].name);
        }
        isTesting = false;
    }

    async function initAndStart(runFn) {
        if (window.flip) {
            return runFn();
        }
        window.flip = new FlipMouse();
        flip.init(true).then(function () {
            runFn();
        });
    }

    function prepareSingleTestButtons() {
        for (let i = 0; i < tests.length; i++) {
            let button = document.createElement('button');
            button.onclick = function () {
                initAndStart(async function() {
                    if (isTesting) {
                        return;
                    }
                    isTesting = true;
                    await doTest(tests[i].fn, tests[i].name);
                    isTesting = false;
                });
            }
            button.innerText = tests[i].name;
            document.getElementById('singleTests').appendChild(button);
        }
    }
    prepareSingleTestButtons();

    async function doTest(testFn, testName) {
        assertFails = 0;
        assertSuccess = 0;
        print(`Testing "${testName}"...`)
        let value = await flip.sendAtCmdWithResult('AT RS');
        log.warn('done reset: ' + value);
        await flip.refreshConfig();
        await testFn();
        if (assertFails > 0) {
            printWarn(`Test "${testName}" failed with ${assertFails} assertion violations and ${assertSuccess} successful assertions!`)
        } else {
            printSuccess(`Test "${testName}" was successful (${assertSuccess} successful assertions)!`)
        }
    }

    function assertEqual(val1, val2, options) {
        if (!isString(val1)) val1 = JSON.parse(JSON.stringify(val1));
        if (!isString(val2)) val2 = JSON.parse(JSON.stringify(val2));
        options = options || {};
        if (options.ignoreProperties) {
            options.ignoreProperties.forEach(ignore => {
                if(!isString(val1)) delete val1[ignore];
                if(!isString(val2)) delete val2[ignore];
            });
        }
        val1 = isString(val1) ? val1 : JSON.stringify(val1);
        val2 = isString(val2) ? val2 : JSON.stringify(val2);
        if (val1 !== val2) {
            assertFails++;
            printWarn('<b>Assert failed:</b>');
            printWarn('Value 1: ' + highlightDiffs(val1, val2), 1);
            printWarn('Value 2: ' + highlightDiffs(val2, val1), 2);
            log.error('Assert failed!');
        } else {
            assertSuccess++;
            printDebug('<b>Assert success</b>');
            printDebug('Value 1: ' + val1, 1);
            printDebug('Value 2: ' + val2, 2);
        }
    }

    function assertTrue(value) {
        assertEqual(!!value, true);
    }

    function assertFalse(value) {
        assertEqual(!value, true);
    }

    function isString(str) {
        return typeof str === 'string' || str instanceof String;
    }

    function print(text, color, breaks) {
        breaks = breaks || 0;
        color = color || 'black';
        let html = `<div style="color: ${color}; overflow-wrap: break-word">${text}</div>`;
        for (let i = 0; i < breaks; i++) html += "<br/>";
        document.getElementById('log').innerHTML += html;
    }

    function printWarn(text, breaks) {
        print(text, 'darkred', breaks);
    }

    function printSuccess(text, breaks) {
        print(text, 'green', breaks);
    }

    function printDebug(text, breaks) {
        if (PRINT_DEBUG) print(text, 'gray', breaks);
    }

    function highlightDiffs(compare, base) {
        let result = '';
        compare.split('').forEach(function (val, i) {
            if (val !== base.charAt(i)) {
                result += "<b>" + val + "</b>";
            } else {
                result += val;
            }
        });
        return result;
    }
</script>
</body>
</html>
